statements : NEWLINE* statement (NEWLINE+ statement)* NEWLINE

statement  : KEYWORD:RETURN expr?
           : KEYWORD:CONTINUE
           : KEYWORD:BREAK
           : KEYWORD:DELETE IDENTIFIER
           : KEYWORD:IMPORT import-expr
           : expr

expr       : KEYWORD:VAR IDENTIFIER EQ expr
           : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr  : KEYWORD:NOT comp-expr
           : KEYWORD:TRUE
           : KEYWORD:FALSE
           : KEYWORD:NULL
           : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr : term ((PLUS|MINUS|UNION) term)*

term       : factor ((MUL|DIV|COLON|CONCAT|MOD) factor)*

factor     : (PLUS|MINUS) factor
           : power

power      : call (POW factor)*

call       : access-expr (LPAREN (expr (COMMA expr)*)? RPAREN)?

access-expr: atom (LSQUARE expr RSQUARE)?

atom       : INT|FLOAT|STRING|IDENTIFIER
           : LPAREN expre RPAREN
           : import-expr
           : list-expr
           : if-expr
           : for-expr
           : while-expr
           : func-def

list-expr  : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr    : KEYWORD:IF expr KEYWORD:THEN
             (statement if-expr-b|if-expr-c)
           | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b  : KEYWORD:ELSE
             statement
           | (NEWLINE statements KEYWORD:END)

if-expr-c    : KEYWORD:ELIF expr KEYWORD:THEN
             (statement if-expr-b|if-expr-c)
           | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)


for-expr   : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
             (KEYWORD:STEP expr)? KEYWORD:THEN 
             statement
           | (NEWLINE statements KEYWORD:END)

while-expr : KEYWORD:WHILE expr KEYWORD:THEN 
             statement
           | (NEWLINE statements KEYWORD:END)

func-def   : KEYWORD:FUN IDENTIFIER?
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
             (ARROW expr)
           | (NEWLINE statements KEYWORD:END)